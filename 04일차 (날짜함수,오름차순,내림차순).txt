# 날짜함수 

1. 현재날짜시간

Sys.Date() - 연, 월, 일
Sys.time() - 연, 월, 일, 시간 전체 나오는 값
date() - charcter형식, 문자형식 날짜

- 날짜는 보통 numeric 형식으로 되어있다.

str(date())
 chr "Thu Jul 26 11:00:53 2018"

2. as.Date : 문자날짜를 날짜형으로 변환하는 함수

as.Date('2018-07-26')
as.Date('2018/07/26')
as.Date('20180726', format='%Y%m%d') 

3. format - 옵션도 가능하고 함수로도 가능하다. type은 character 이다.

	%Y: 세기를 포함한 년도(4자리)
	%y: 세기를 생략한 년도(2자리)
	%m: 숫자달
	%B: 문자달
	%b: 문자달의 약어
	%d: 일
	%A: 요일
	%a: 요일의 약어 
	%u: 숫자요일 1 ~ 7 월요일(1)
	%w: 숫자요일 0 ~ 6 일요일(0)
	%H: 시
	%M: 분
	%S: 초
	%z: timezone 시간
	%Z: timezone name


format(Sys.time(),'%Y%m%d %z%Z')
[1] "20180726 +0900KST"
format(Sys.time(),'%A %a %u %w')
[1] "목요일 목 4 4"

str(format(Sys.time(),'%Y%m%d %z%Z'))
chr "20180726 +0900KST"

4. weekdays : 요일을 출력해주는 함수 
	
weekdays(Sys.Date())
[1] "목요일"

weekdays(as.Date('1992-07-04'))
[1] "토요일"

weekdays(as.Date('1992-07-04','%Y-%m-%d')) 
[1] "토요일"

format(as.Date('1992-07-04'),'%A')

5. 날짜 계산 

Sys.Date() + 100 - 날짜 + 일 = 날짜 
[1] "2018-11-03"

Sys.Date() - 206 - 날짜 - 일 = 날짜
[1] "2018-01-01"

as.Date('2018-07-26',format='%Y-%m-%d') + 120
[1] "2018-11-23"

as.Date('2018-05-24',format='%Y-%m-%d') - as.Date('2018-11-22',format='%Y-%m-%d') - 날짜 - 날짜 = 일수
Time difference of -182 days

# 숫자만 출력하고 싶은 경우

as.numeric(as.Date('2018-11-22',format='%Y-%m-%d') - as.Date('2018-05-24',format='%Y-%m-%d'))
[1] 182
as.numeric(as.Date('2018-11-22',format='%Y-%m-%d')-as.Date('2018-07-26',format='%Y-%m-%d'))
[1] 119

6. difftime : 두 날짜간의 일수를 표현하는 함수

difftime('2018-11-22',Sys.Date())
Time difference of 118.625 days

as.numeric(difftime('2018-11-22',Sys.Date()))
[1] 118.625

round(as.numeric(difftime('2018-11-22',Sys.Date())))
[1] 119

7. as.difftime : 시간의 차이를 표현하는 함수

as.difftime(시간정보)

as.difftime('09:30') - as.difftime('18:30') - 이유 : 시 분 초 를 적지 않았기 때문
Time difference of NA secs

as.difftime('09:30:00') - as.difftime('18:30:00')
Time difference of -9 hours

as.numeric(as.difftime('18:30:00')-as.difftime('09:30:00'))
[1] 9

8. lubridate - now(), year()를 가지고 있는 packages

# 패키지를 설치하면 그 데스크탑엔 설치가 되있기 때문에 다음에 사용을 할 수 있다. 단 사용하려고 할땐 library로 항상 load 시켜야한다.

install.packages("lubridate")
library(lubridate) 

	1> now(): 현재시간을 나타내는 함수

	2> 연도를 뽑아내는 방법 : year(now())

	3> 달을 뽑아내는 방법 : month(now()) [1] 7  
			        date<-now(), month(date)

	- 타입을 알고 싶을 때 month(date,label=T)
	[1] 7
	Levels: 1 < 2 < 3 < 4 < 5 < 6 < 7 < 8 < 9 < 10 < 11 < 12 - factor 형임을 알 수 있다.
	month(date,label=F)
	[1] 7
	format(Sys.time(),'%m')
	
	4> 일을 뽑아내는 방법 : day(now())
				day(date)
				format(Sys.time(),'%d')

	5> 요일을 뽑아내는 방법 : wday(now())
				  [1] 5
				  format(Sys.time(),'%u')
				  [1] 4
				  format(Sys.time(),'%w')
				  [1] 4

	- 시작이 다른 것을 알 수 있다. <기준점이 달라서 그렇다. wday는 기준점이 일요일, format 함수에선 기준점이 월요일 이므로>

	그래서 week_start 옵션으로 시작값을 바꿔줘야 한다.

	wday(now(),week_start=1) # 월요일 기준
	wday(now(),week_start=7) # 일요일 기준
	wday(now(),week_start=7,label=T)
	[1] 목
	Levels: 일 < 월 < 화 < 수 < 목 < 금 < 토 - factor인 것을 알 수있고 또한 시작점이 일요일인 것도 알 수 있다.

	select sysdate + to_yminterval('10-00') from dula;
	select sysdate + to_dsinterval('100 00:00:00') from dula;

	years(10)
	[1] "10y 0m 0d 0H 0M 0S"
	months(100)
	[1] "100m 0d 0H 0M 0S"
	now()

	now() + years(10)
	[1] "2028-07-26 14:07:15 KST"
	now() + months(100)
	[1] "2026-11-26 14:07:16 KST"
	now() + days(100)
	[1] "2018-11-03 14:07:17 KST"
	now() + hours(3)
	[1] "2018-07-26 17:09:33 KST"
	now() + minutes(100)
	[1] "2018-07-26 15:49:57 KST"
	now() + seconds(100)
	[1] "2018-07-26 14:12:02 KST"
	now() + years(1) + months(1) + days(1) + hours(10) + minutes(20) + seconds(60) 
	[1] "2019-08-28 00:32:11 KST"

	hm('08:00') -- 시간 분 추가 가능

	[1] "8H 0M 0S"
	now() + hm('08:00') 
	[1] "2018-07-26 22:12:54 KST"
	now() + hms('02:30:59') -- 시간 분 초 가능
	[1] "2018-07-26 16:44:40 KST"

	date <- now()
	date
	year(date) <- 2017 -- 시간의 연도를 바꾸는 방법
	date
	[1] "2017-07-26 14:14:50 KST"
	month(date) <- 01  -- 달 바꾸는 법
	day(date) <- 01 -- 일 바꾸는 법
	hour(date) <- 01 -- 시간 수정
	minute(date) <- 00 -- 분 수정
	second(date) <- 00 -- 초 수정
	date
	"2017-01-01 KST

9. 분기
	quarters(Sys.Date())
	[1] "Q3"

> class(Sys.Date())
[1] "Date"
> class(Sys.time())
[1] "POSIXct" "POSIXt" 
> mode(Sys.Date())
[1] "numeric"
> mode(Sys.time())
[1] "numeric"

POSIX(Portable Operating System Interface) - UNIX Flatform , UNIX 간 소통 가능한 프로그램 인터페이스의 규약
POSIXct (continuous) POSIXt (POSIX | t)(list time)
R은 날짜 시간 데이터를 처리할 수 있도록 POSIXct (continuous) POSIXt (POSIX | t)(list time) 클래스를 사용한다.

as.numeric(Sys.time())
[1] 1532589189

time<-as.POSIXlt(Sys.time())
[1] "2018-07-26 16:15:16 KST"

> unlist(time)
               sec                min               hour               mday 
"16.2177259922028"               "15"               "16"               "26" 
               mon               year               wday               yday 
               "6"              "118"                "4"              "206" 
             isdst               zone             gmtoff 
               "0"              "KST"            "32400"

sec : 초, min: 분 , hour: 시간, mday: 그달의 일, mon: 1월을 0, 월을 의미 year: 1900년을 0으로 1900+118 = 2018 
wday : 일요일 0 ,yday : 1월 1일 0 ,isdst : 서머타임 ,zone: timezone name, gmtoff: timezone 시(초) -- 유닉스의 시간정보와 같다.

date <- '2018-07-26'
 
> as.Date(date,format='%Y-%m-%d')
[1] "2016-12-31"
> class(as.Date(date,format='%Y-%m-%d'))
[1] "Date"

> strptime(date,format='%Y-%m-%d')
[1] "2017-01-01 KST"
> class(strptime(date,format='%Y-%m-%d'))
[1] "POSIXlt" "POSIXt"


# 중복제거 unique

unique(emp$JOB_ID)

# 정렬 (SORT)

x <- c(3,2,4,8,6,5,10,NA,1,11,NA,15)

sort(x) -- sort 할시 na값이 없어진다.
 [1]  1  2  3  4  5  6  8 10 11 15 
sort(x, decreasing=FALSE) - 오름차순 (기본값)
 [1]  1  2  3  4  5  6  8 10 11 15
sort(x, decreasing=TRUE) - 내림차순
 [1] 15 11 10  8  6  5  4  3  2  1
sort(x, decreasing=FALSE, na.last=NA) - NA 출력안함 (기본값)
 [1]  1  2  3  4  5  6  8 10 11 15
sort(x, decreasing=FALSE, na.last=TRUE) - NA를 마지막에 출력
 [1]  1  2  3  4  5  6  8 10 11 15 NA NA
sort(x, decreasing=FALSE, na.last=FALSE) - NA를 처음으로 출력
 [1] NA NA  1  2  3  4  5  6  8 10 11 15
rev(sort(x)) - 내림차순으로 변함
 [1] 15 11 10  8  6  5  4  3  2  1

# order : 정렬의 색인을 반환 - index
x <- c(30,50,10,40,20)
> sort(x)
[1] 10 20 30 40 50
> order(x) - 1번이 3번의 위치에 있다, 2번이 5번의 위치에 있다 를 의미한다. <인덱스를 의미한다.>
[1] 3 5 1 4 2
x[order(x)] - sort와 같다.

x[order(x,decreasing=TRUE,na.last=NA)] reverse 와 같다.
x[order(x,decreasing=TRUE,na.last=TRUE)]
x[order(x,decreasing=TRUE,na.last=FALSE)]

# doBy : 데이터 프레임 정렬

install.packages("doBy")
library(doBy)

# 오름차순

orderBy(~SALARY,emp[,c("LAST_NAME","SALARY")]) - 오름차순으로 급여가 설정 기본형식

      LAST_NAME SALARY
42        Olson   2100
38       Markle   2200
46   Philtanker   2200
37       Landry   2400
45          Gee   2400
29   Colmenares   2500
41       Marlow   2500
50        Patel   2500
54       Vargas   2500
92     Sullivan   2500
101     Perkins   2500
1      OConnell   2600
2         Grant   2600
28       Himuro   2600
53        Matos   2600
36  Mikkilineni   2700
49          Seo   2700
27       Tobias   2800
40     Atkinson   2800
93        Geoni   2800
105       Jones   2800
26        Baida   2900
44       Rogers   2900
100       Gates   2900
97       Cabrio   3000
107      Feeney   3000
25         Khoo   3100
52       Davies   3100
91       Fleaur   3100
106       Walsh   3100
35        Nayer   3200
48       Stiles   3200
90       Taylor   3200
104      McCain   3200
39       Bissot   3300
43       Mallin   3300
96    Dellinger   3400
51         Rajs   3500
47       Ladwig   3600
99        Dilly   3600
98        Chung   3800
103     Everett   3900
102        Bell   4000
95         Bull   4100
17      Lorentz   4200
94     Sarchand   4200
3        Whalen   4400
15       Austin   4800
16    Pataballa   4800
34      Mourgos   5800
5           Fay   6000
14        Ernst   6000
83        Kumar   6100
77        Banda   6200
89      Johnson   6200
76         Ande   6400
6        Mavris   6500
33      Vollman   6500
75          Lee   6800
23         Popp   6900
65      Tuvault   7000
71       Sewall   7000
88        Grant   7000
74      Marvins   7200
82        Bates   7300
81        Smith   7400
64    Cambrault   7500
70        Doran   7500
21      Sciarra   7700
22        Urman   7800
32     Kaufling   7900
30        Weiss   8000
63        Olsen   8000
69        Smith   8000
20         Chen   8200
31        Fripp   8200
9         Gietz   8300
87   Livingston   8400
86       Taylor   8600
85       Hutton   8800
13       Hunold   9000
19       Faviet   9000
62         Hall   9000
68       McEwen   9000
61    Bernstein   9500
67        Sully   9500
73       Greene   9500
80          Fox   9600
7          Baer  10000
60       Tucker  10000
66         King  10000
79        Bloom  10000
59      Zlotkey  10500
72      Vishney  10500
24     Raphaely  11000
58    Cambrault  11000
84         Abel  11000
78         Ozer  11500
57    Errazuriz  12000
8       Higgins  12008
18    Greenberg  12008
4     Hartstein  13000
56     Partners  13500
55      Russell  14000
11      Kochhar  17000
12      De Haan  17000
10         King  29040

# 내림차순

orderBy(~-SALARY,emp[,c("LAST_NAME","SALARY")])

    LAST_NAME SALARY
10         King  29040
11      Kochhar  17000
12      De Haan  17000
55      Russell  14000
56     Partners  13500
4     Hartstein  13000
8       Higgins  12008
18    Greenberg  12008
57    Errazuriz  12000
78         Ozer  11500
24     Raphaely  11000
58    Cambrault  11000
84         Abel  11000
59      Zlotkey  10500
72      Vishney  10500
7          Baer  10000
60       Tucker  10000
66         King  10000
79        Bloom  10000
80          Fox   9600
61    Bernstein   9500
67        Sully   9500
73       Greene   9500
13       Hunold   9000
19       Faviet   9000
62         Hall   9000
68       McEwen   9000
85       Hutton   8800
86       Taylor   8600
87   Livingston   8400
9         Gietz   8300
20         Chen   8200
31        Fripp   8200
30        Weiss   8000
63        Olsen   8000
69        Smith   8000
32     Kaufling   7900
22        Urman   7800
21      Sciarra   7700
64    Cambrault   7500
70        Doran   7500
81        Smith   7400
82        Bates   7300
74      Marvins   7200
65      Tuvault   7000
71       Sewall   7000
88        Grant   7000
23         Popp   6900
75          Lee   6800
6        Mavris   6500
33      Vollman   6500
76         Ande   6400
77        Banda   6200
89      Johnson   6200
83        Kumar   6100
5           Fay   6000
14        Ernst   6000
34      Mourgos   5800
15       Austin   4800
16    Pataballa   4800
3        Whalen   4400
17      Lorentz   4200
94     Sarchand   4200
95         Bull   4100
102        Bell   4000
103     Everett   3900
98        Chung   3800
47       Ladwig   3600
99        Dilly   3600
51         Rajs   3500
96    Dellinger   3400
39       Bissot   3300
43       Mallin   3300
35        Nayer   3200
48       Stiles   3200
90       Taylor   3200
104      McCain   3200
25         Khoo   3100
52       Davies   3100
91       Fleaur   3100
106       Walsh   3100
97       Cabrio   3000
107      Feeney   3000
26        Baida   2900
44       Rogers   2900
100       Gates   2900
27       Tobias   2800
40     Atkinson   2800
93        Geoni   2800
105       Jones   2800
36  Mikkilineni   2700
49          Seo   2700
1      OConnell   2600
2         Grant   2600
28       Himuro   2600
53        Matos   2600
29   Colmenares   2500
41       Marlow   2500
50        Patel   2500
54       Vargas   2500
92     Sullivan   2500
101     Perkins   2500
37       Landry   2400
45          Gee   2400
38       Markle   2200
46   Philtanker   2200
42        Olson   2100

orderBy(~DEPARTMENT_ID+SALARY,emp[,c("LAST_NAME","SALARY","DEPARTMENT_ID")]) - 밑에와 같다.

select last_name, salary, department_id
from emp
order by departement_id, salary

orderBy(~-DEPARTMENT_ID-SALARY,emp[,c("LAST_NAME","SALARY","DEPARTMENT_ID")]) - 오름차순으로 나온다.

select last_name, salary, department_id
from emp
order by departement_id desc, salary desc

orderBy(~DEPARTMENT_ID-SALARY,emp[,c("LAST_NAME","SALARY","DEPARTMENT_ID")]) - 하나 오름차순, 하나 내림차순

select last_name, salary, department_id
from emp
order by departement_id, salary desc

