# 그룹함수

x<- c(100,90,80,70)

sum(x) - 합
mean(x) - 평균
var(x) - 분산
sd(x) - 표준편차
max(x) - 최대값
min(x) - 최고값
length(x) -  갯수
NROW(x) - 갯수

x<-c(100,90,80,70,NA)
sum(x) -> 결측치 때문에 NA로 나온다.


> sum(x,na.rm=TRUE)
[1] 340
> sum(x,na.rm=FALSE)
[1] NA
> sum(x,na.rm=TRUE)
[1] 340
> sum(x,na.rm=FALSE)
[1] NA
> mean(x,na.rm=TRUE)
[1] 85
> var(x,na.rm=TRUE)
[1] 166.6667
> sd(x,na.rm=TRUE)
[1] 12.90994
> max(x,na.rm=TRUE)
[1] 100
> min(x,na.rm=TRUE)
[1] 70
> length(x) -- NA도 세어서 나타난다.
[1] 5
> NROW(x)
[1] 5

- NA를 없애고 싶다면

length(na.omit(x))

select sum(salary), avg(salary) from emp;


select dept_id,sum(salary) 
from emp
group by dept_id;

# aggregate 함수 -데이터프레임 

- 데이터를 분할하고 각  그룹으로  묶은 후 그룹함수를 적용한다.

aggregate(계산될 컬럼~분할해야할 기준컬럼, 데이터, 함수)

aggregate(SALARY~JOB_ID,emp,sum)

select job_id, sum(salary) from emp group by job_id; 

# apply
 
- 행렬, 배열, 데이터프레임에 함수를 적용한 결과를 벡터, 리스트, 배열 형태로 리턴한다.
- 행렬에서 행이나 열의 방향으로 함수를 적용

apply(x, MARGIN, FUN)

x : 행렬, 배열, 데이터프레임
MARGIN : 함수를 적용할 때 방향을 지정
	 1 : 행방향, 2 : 열방향, c(1,2) : 행,열 방향
FUN : 적용할 함수 (sum, mean, var, sd, max, min)

m<-matrix(c(1:4),ncol=2)
m
dim(m)
apply(m,1,sum) - 행방향으로 더한다.
apply(m,2,sum) - 열방향으로 더한다.
> apply(m,1,sum)
[1] 4 6
> apply(m,2,sum)
[1] 3 7

df<-data.frame(name=c('king','smith','jane'),sql=c(90,NA,70),python=c(75,90,NA))

-- data.frame 일때 apply 를 사용하는 방법

apply(df[,2],1,sum) - 하지만 오류가 뜬다. 특정한 열만 뽑게 되면, 배열,행렬,데이터프레임 형식에 맞지 않기 때문에 나오지 않는다.

apply(df[,c(2:3)],1,sum) 
[1] 165  NA  NA

apply(df[,c(2:3)],1,sum,na.rm=TRUE) -NA값을 무시하고 나옴
[1] 165  90  70

apply(df[,c(2:3)],2,sum)
   sql python 
    NA     NA 
apply(df[,c(2:3)],2,sum,na.rm=TRUE)
   sql python 
   160    165 

# rowSums() : 배열, 행렬, 데이터프레임의 행의 합
# rowMeans() : 배열, 행렬, 데이터프레임의 행의 평균

예)
rowSums(df[,2:3],na.rm=T)
[1] 165  90  70
rowMeans(df[,2:3],na.rm=T)
[1] 82.5 90.0 70.0
rowMeans(df[,c(2,3)],na.rm=T)
[1] 82.5 90.0 70.0

# colSums() : 배열, 행렬, 데이터프레임의 열의 합
# colMeans() : 배열, 행렬, 데이터프레임의 열의 평균

colSums(df[,2:3],na.rm=T)
   sql python 
   160    165 
colMeans(df[,2:3],na.rm=T)
   sql python 
  80.0   82.5 
colMeans(df[,c(2,3)],na.rm=T)
   sql python 
  80.0   82.5 

# lapply
- 벡터, 리스트, 데이터프레임 함수를 적용하고 그 결과 리스트로 리턴하는 함수
- 리스트 : 서로 다른 데이터타입에 값을 저장하는 자료형이다.

x<-list(a=1:3,b=4:6)
x
str(x)
mean(x$a)
[1] 2
mean(x$b)
[1] 5

lapply(x,mean)
$`a`
[1] 2
$b
[1] 5

df<-data.frame(name=c('king','smith','jane'),sql=c(90,NA,70),python=c(75,90,NA))

lapply(df[,2:3],mean,na.rm=T) - list
$`sql`
[1] 80
$python
[1] 82.5
 
apply(df[,2:3],2,mean,na.rm=T) - matrix, array ,data.frame 
 sql python 
 80.0   82.5

colMeans(df[,2:3],na.rm=T) 
 sql python 
 80.0   82.5 

# list -> vector -> matrix-> data.frame 변환하는 과정

lapply(df[,2:3],mean,na.rm=T) - list형의 결과
$`sql`
[1] 80
$python
[1] 82.5

1. 벡터형으로 변환
unlist(lapply(df[,2:3],mean,na.rm=T)) - 리스트형을 벡터로 보는 방법 : unlist 사용

str(unlist(lapply(df[,2:3],mean,na.rm=T)))
 - attr(*, "names")= chr [1:2] "sql" "python"
class(unlist(lapply(df[,2:3],mean,na.rm=T)))
[1] "numeric"
mode(unlist(lapply(df[,2:3],mean,na.rm=T)))
[1] "numeric"

2. matrix 변환
matrix(unlist(lapply(df[,2:3],mean,na.rm=T)),ncol=2,byrow=TRUE)
      [,1] [,2]
[1,]   80 82.5

3. data.frame 변환
x<-as.data.frame(matrix(unlist(lapply(df[,2:3],mean,na.rm=T)),ncol=2,byrow=TRUE)
  V1   V2
1 80 82.5

>str(x)
'data.frame':	1 obs. of  2 variables:
 $ V1: num 80
 $ V2: num 82.5
> class(x)
[1] "data.frame"
> mode(x)
[1] "list"
names(x)<-c('sql','python')
x
 sql python
1  80   82.5

# sapply 
- 벡터, 리스트, 데이터프레임에 함수를 적용하고 그 결과를 벡터로 리턴하는 함수 

x<- sapply(df[,2:3],mean,na.rm=TRUE)
  sql python 
  80.0   82.5 

> str(x)
 Named num [1:2] 80 82.5
 - attr(*, "names")= chr [1:2] "sql" "python"
> class(x)
[1] "numeric"
> mode(x)
[1] "numeric"

# data.frame으로 바꾸기

x<-as.data.frame(matrix(x,ncol=2,byrow=TRUE))
names(x)<-c("sql","python")

# tapply
- 벡터, 데이터프레임에 저장된 데이터를 주어진 기준에 따라 그룹으로 묶는 뒤 그룹함수를 적용하고 그 결과를 array 형식으로 리턴하는 함수 

tapply(emp$SALARY, emp$DEPARTMENT_ID, sum) - tapply(계산할 컬럼,그룹 컬럼, 그룹함수)

    10     20     30     40     50     60     70     80     90    100    110 
  4400  19000  24900   6500 156400  28800  10000 304500  63040  51608  20308 

aggregate(SALARY~DEPARTMENT_ID,emp,sum)

   DEPARTMENT_ID SALARY
1             10   4400
2             20  19000
3             30  24900
4             40   6500
5             50 156400
6             60  28800
7             70  10000
8             80 304500
9             90  63040
10           100  51608
11           110  20308

 _ 두개 이상 기준을 잡으려면 어떻게 해야 할까.

tapply(emp$SALARY, (list(emp$DEPARTMENT_ID,emp$JOB_ID)), sum) - 리스트모양이기 때문에 리스트 또는 데이터 프레임으로 해서 추가한다. 
								(기존 열값을 행과 열로 해서 결과물을 만들어야한다면 tapply 를 사용해야한다.)

    AC_ACCOUNT AC_MGR AD_ASST AD_PRES AD_VP FI_ACCOUNT FI_MGR HR_REP IT_PROG MK_MAN MK_REP PR_REP
10          NA     NA    4400      NA    NA         NA     NA     NA      NA     NA     NA     NA
20          NA     NA      NA      NA    NA         NA     NA     NA      NA  13000   6000     NA
30          NA     NA      NA      NA    NA         NA     NA     NA      NA     NA     NA     NA
40          NA     NA      NA      NA    NA         NA     NA   6500      NA     NA     NA     NA
50          NA     NA      NA      NA    NA         NA     NA     NA      NA     NA     NA     NA
60          NA     NA      NA      NA    NA         NA     NA     NA   28800     NA     NA     NA
70          NA     NA      NA      NA    NA         NA     NA     NA      NA     NA     NA  10000
80          NA     NA      NA      NA    NA         NA     NA     NA      NA     NA     NA     NA
90          NA     NA      NA   29040 34000         NA     NA     NA      NA     NA     NA     NA
100         NA     NA      NA      NA    NA      39600  12008     NA      NA     NA     NA     NA
110       8300  12008      NA      NA    NA         NA     NA     NA      NA     NA     NA     NA
    PU_CLERK PU_MAN SA_MAN SA_REP SH_CLERK ST_CLERK ST_MAN
10        NA     NA     NA     NA       NA       NA     NA
20        NA     NA     NA     NA       NA       NA     NA
30     13900  11000     NA     NA       NA       NA     NA
40        NA     NA     NA     NA       NA       NA     NA
50        NA     NA     NA     NA    64300    55700  36400
60        NA     NA     NA     NA       NA       NA     NA
70        NA     NA     NA     NA       NA       NA     NA
80        NA     NA  61000 243500       NA       NA     NA
90        NA     NA     NA     NA       NA       NA     NA
100       NA     NA     NA     NA       NA       NA     NA
110       NA     NA     NA     NA       NA       NA     NA

tapply(emp$SALARY, (list(emp$DEPARTMENT_ID,emp$JOB_ID)), sum,default=0) - default : 값을 지정해준다.

    AC_ACCOUNT AC_MGR AD_ASST AD_PRES AD_VP FI_ACCOUNT FI_MGR HR_REP IT_PROG MK_MAN MK_REP PR_REP
10           0      0    4400       0     0          0      0      0       0      0      0      0
20           0      0       0       0     0          0      0      0       0  13000   6000      0
30           0      0       0       0     0          0      0      0       0      0      0      0
40           0      0       0       0     0          0      0   6500       0      0      0      0
50           0      0       0       0     0          0      0      0       0      0      0      0
60           0      0       0       0     0          0      0      0   28800      0      0      0
70           0      0       0       0     0          0      0      0       0      0      0  10000
80           0      0       0       0     0          0      0      0       0      0      0      0
90           0      0       0   29040 34000          0      0      0       0      0      0      0
100          0      0       0       0     0      39600  12008      0       0      0      0      0
110       8300  12008       0       0     0          0      0      0       0      0      0      0
    PU_CLERK PU_MAN SA_MAN SA_REP SH_CLERK ST_CLERK ST_MAN
10         0      0      0      0        0        0      0
20         0      0      0      0        0        0      0
30     13900  11000      0      0        0        0      0
40         0      0      0      0        0        0      0
50         0      0      0      0    64300    55700  36400
60         0      0      0      0        0        0      0
70         0      0      0      0        0        0      0
80         0      0  61000 243500        0        0      0
90         0      0      0      0        0        0      0
100        0      0      0      0        0        0      0
110        0      0      0      0        0        0      0

tapply(emp$SALARY, (data.frame(emp$DEPARTMENT_ID,emp$JOB_ID)), sum,default=0) 